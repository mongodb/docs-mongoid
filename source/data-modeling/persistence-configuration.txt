.. _mongoid-persistence:

=========================
Persistence Configuration
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 3
   :class: singlecol

.. TODO: add meta, facets

Overview
--------

In this guide, you can learn about how {+odm+} persists data in your database
and collections. **Persistence configuration** refers to the settings that
control how {+odm+} stores data in MongoDB. This includes the client,
database, and collection where documents for a model class are stored in, as
well as other configuration options such as read and write preferences. This guide 
provides methods and examples that can be used to access and update 
the persistence configuration of a model class.

.. note::
   
   "Client" refers to a host configuration defined under ``clients`` in your
   ``mongoid.yml`` file. Most applications use a single client named ``default``.

Default Collection Name
-----------------------

By default, {+odm+} stores documents in a collection whose name is the pluralized
form of its representative class name. In the following example, for the 
``Restaurant`` class, the corresponding collection is named ``restaurants``. For
the ``Person`` class, the corresponding collection is named ``people``.

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start default modeling
   :end-before: end default modeling

This pluralization functionality relies on functions in the 
`ActiveSupport::Inflector <https://api.rubyonrails.org/classes/ActiveSupport/Inflector.html>`__ 
class. However, sometimes the default rules of pluralization don't always work. For 
example, if your model class is named ``Alumnus``, the default collection is
named ``alumnus``, even if the grammatically correct collection name is
``alumni``. Or, perhaps you want your model to be named in a language other than
English.

To specify custom inflection rules for your model class, use methods from 
the ``ActiveSupport::Inflector::Inflections`` class. You can pass the singular and
plural forms of your class name to the ``plural()`` method to create a new
pluralization rule. The following example specifies ``"alumni"`` as the plural
of ``"alumnus"``:

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start set pluralization
   :end-before: end set pluralization

The preceding code creates a new inflection in the current instance of the
``ActiveSupport::Inflector`` class. As a result, {+odm+} stores
``Alumnus`` model class documents in the ``alumni`` collection.

To learn more about inflection methods, see the documentation for
`Active Support Inflections <https://api.rubyonrails.org/classes/ActiveSupport/Inflector/Inflections.html>`__.

.. note:: BSON Document Structure

   When {+odm+} stores a document in a database, it serializes the Ruby object
   to a BSON document that has the following structure:

   .. literalinclude:: /includes/data-modeling/persistence-configuration.rb
      :language: ruby
      :start-after: start BSON model
      :end-before: end BSON model

Persistence Context Attributes
------------------------------

Every model class contains the following methods, which you can use to retrieve
information about where {+odm+} persists the model:

- ``client_name``: Retrieves the client name
- ``database_name``: Retrieves the database name
- ``collection_name``: Retrieves the collection name

The following example shows how to retrieve and print the names of the client, 
database, and collection where documents for the ``Band`` class are persisted:

.. io-code-block::

  .. input:: /includes/data-modeling/persistence-configuration.rb
     :language: ruby
     :start-after: start persistence context attributes
     :end-before: end persistence context attributes

  .. output::
     :language: ruby
     :visible: false

     default

     my_bands

     bands

Customize Your Persistence Configuration
----------------------------------------

{+odm+} provides both model-level and runtime options for customizing your 
persistence configuration. The following sections describe these options.

Model-Level Persistence Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Perhaps you want to store your model's documents in a collection with a 
different name than the pluralized form of the model class name.

You can use the ``store_in`` macro to change the collection, database, or client
where {+odm+} stores a model's documents. The following example shows how
to use the ``store_in`` macro to store documents from the ``Person`` class in
a collection called ``citizens`` in the ``other`` database within a client
named ``analytics``.

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start store_in example
   :end-before: end store_in example

The ``store_in`` macro can also accept a lambda. For example, you might want to 
use this pattern in a multi-tenant application,
where multiple users share common access to an application. You can use a lambda
to perform operations on different databases based on the current thread so that
users cannot access each others' data. The following example stores documents in
a database determined by the current thread:

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start store_in lambda example
   :end-before: end store_in lambda example

.. _mongoid-set-runtime-persistence-options:

Runtime Persistence Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can use the ``with()`` method on a model class or instance to change
a model's persistence configuration for a group of operations during runtime.

The persistence context for the model class or instance that you call ``with()``
on changes to the temporary persistence context that you define by the arguments
passed to the ``with()`` method within a block. When you call ``with()`` on a 
model class or instance, the class or instance is yielded to the block. The 
temporary persistence context applies to both queries and writes.

By default, {+odm+} stores documents for the ``Band`` class in a collection called
``bands``. The following code example uses the ``with()`` method to temporarily
use a different client, database, and collection to perform operations on the 
``Band`` class's documents:

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start with() example
   :end-before: end with() example

.. note:: Define Clients

   In the preceding example, you must define the ``tertiary`` cluster under
   ``clients`` in your ``mongoid.yml`` file.

Ensuring Consistency in Contexts
++++++++++++++++++++++++++++++++

If you save a document in a temporary persistence context, it does not exist
in the default persistence context if you do not save it there as well. 
For example, if you insert a ``Band`` model document into the ``artists`` 
collection, the same document will not be inserted into the ``bands`` collection.
Ensure that you perform operations on the same persistence context for data
consistency. The following example uses ``with()`` to insert a document into
a custom collection and to update that document in the correct collection.

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start consistency example
   :end-before: end consistency example

.. important:: Block Scope
   
   You must call the ``with()`` method with a block.
   This is because {+odm+} uses the options you pass to the method to create
   a new client in the background. A block defines the scope of this client
   so it can be closed and its resources freed.

You can also perform read and write operations in the context of a ``with()``
method. The following example uses the ``with()`` method to call ``Band.count``
on the secondary node of a replica set:

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start read configuration
   :end-before: end read configuration

Global Persistence Contexts
+++++++++++++++++++++++++++

In previous examples in this section, you can only change persistence context in
the scope of a block. {+odm+} can globally define the persistence
configuration to perform all operations on a particular database or client. 
This lets you change the persistence context for all operations at runtime
without repreatedly calling the ``with()`` method.

You can use the following methods to globally define the persistence context
in your program:

- ``{+odm+}.override_client``: Perform all operations on the specified client.

- ``{+odm+}.override_database``: Perform all operations on the specified
  database.

In the following code example, the application stores information for different
locales in different databases. The code shows how to use the 
``{+odm+}.override_database()`` method to globally set the persistence
context based on the locale:

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start global configuration example
   :end-before: end global configuration example

In the preceding example, {+odm+} performs all other operations on this thread
on an alternative database determined by the locale. Because the ``after_action`` 
macro sets the override option to ``nil``, subsequent requests with no
changes in persistence configuration use the default configuration.

Client and Collection Access
----------------------------

You can access the client or collection of a model or document instance by using
the ``mongo_client()`` and ``collection()`` class methods:

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
   :language: ruby
   :start-after: start access client collection
   :end-before: end access client collection

When using these methods, you can also set runtime persistence options by calling
the ``with()`` method, similar to examples in the :ref:`mongoid-set-runtime-persistence-options`
section.

``mongo_client.with``
~~~~~~~~~~~~~~~~~~~~~

The following code example accesses the client used by the ``Band`` model class.
It then uses the ``with()`` method on the client to write to the ``music``
database, setting the ``w`` write option to ``0`` to not require write acknowledgement.

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
  :language: ruby
  :start-after: start client with example
  :end-before: end client with example

``collection.with``
~~~~~~~~~~~~~~~~~~~

You can override the ``:read`` or ``:write`` options on a collection by using the
``with()`` method. The following example shows how to use
the ``with()`` method to set the ``w`` write option to ``0``.

.. literalinclude:: /includes/data-modeling/persistence-configuration.rb
  :language: ruby
  :start-after: start collection with example
  :end-before: end collection with example 

API Documentation
-----------------

For more information about the methods mentioned in this guide, see the following
API documentation:

- `#client_name <{+api-root+}/PersistenceContext.html#client_name-instance_method>`__
- `#database_name <{+api-root+}/Clients/Options/ClassMethods.html#database_name-instance_method>`__
- `#collection_name <{+api-root+}/Clients/Options/ClassMethods.html#collection_name-instance_method>`__
- `#store_in <{+api-root+}/Clients/StorageOptions/ClassMethods.html#store_in-instance_method>`__
- `Model.with() <{+api-root+}/Clients/Options.html#with-instance_method>`__
- `Mongoid.override_client <{+api-root+}/Config.html#override_client-instance_method>`__
- `Mongoid.override_database <{+api-root+}/Config.html#override_database-instance_method>`__
- `Model.mongo_client <{+api-root+}/Clients/Options/ClassMethods.html#mongo_client-instance_method>`__
- `Model.collection <{+api-root+}/Clients/Options/ClassMethods.html#collection-instance_method>`__